@page "/election"
@using Kvalis.Entities
@using Kvalis.Services
@inject ElectionService electionService
@inject KvalisContext context
@inject KeyService keyService
@rendermode InteractiveServer

<h1>Hosted Elections</h1>
@if (hostedElections.Count == 0)
{
    <p>You have not hosted any elections.</p>
}
else
{
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">Election ID</th>
            <th scope="col">End Date</th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var election in hostedElections)
            {
                <tr>
                    <td>@election.Id</td>
                    <td>@election.EndDate.ToString("U")</td>
                    <td><a href="/manage/@election.Id.ToString()" class="btn btn-outline-danger">Manage</a></td>
                    <td><a href="/election/@election.Id.ToString()" class="btn btn-outline-primary">View</a></td>
                </tr>
            }
        </tbody>
    </table>
}

<h1>Joined Elections</h1>
@if (joinedElections.Count == 0)
{
    <p>You have not joined any elections.</p>
}
else
{
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">Election ID</th>
            <th scope="col">End Date</th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var election in joinedElections)
            {
                <tr>
                    <td>@election.Id</td>
                    <td>@election.EndDate.ToString("U")</td>
                    <td><a href="/election/@election.Id.ToString()" class="btn btn-outline-primary">View</a></td>
                    <td><a href="/manage-ballot/@(election.Ballots.Any(b => b.PublicKey == publicKey))" class="btn btn-outline-primary">Ballot</a></td>
                </tr>
            }
        </tbody>
    </table>
}

<hr/>

<a href="/make-election" class="btn btn-primary">Create Election</a>

@code {
    private List<Election> hostedElections = new List<Election>();
    private  List<Election> joinedElections = new List<Election>();
    private byte[] publicKey = null;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        publicKey = await keyService.GetPublicKey();
        
        hostedElections = context.Elections.Where(e => e.PublicKey == publicKey).ToList();
        joinedElections = context.Elections.Where(e => e.Ballots.Any(b => b.PublicKey == publicKey)).ToList();
        
        StateHasChanged();
    }
}