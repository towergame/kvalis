@page "/election/{Id}"
@using Kvalis.Entities
@using Kvalis.Services
@inject ElectionService electionService

@if (error)
{
    <h1>There was an error loading the election results</h1>
    <p>Are you sure the election has ended and/or exists?</p>
}
else if (results == null)
{
    <h1>Loading...</h1>
}
else
{
    <h1>Id: @results.ElectionId</h1>
    @foreach (var (question, options) in results.Results)
    {
        <h2>@question</h2>
        <table class="table table-hover"> 
            <thead>
            <th scope="col">Option</th>
            <th scope="col">Count</th>
            <th scope="col">Percent</th>
            </thead>
            <tbody>
                @foreach(var (option, count) in options)
                {
                    <tr>
                        <td>@option</td>
                        <td>@count</td>
                        <td>@Math.Floor((double)count / options.Sum(kv => kv.Value) * 100)%</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    
    <br/>
    
    <h2>Ballots</h2>
    <p>Ballots Created: @results.Ballots.Count</p>
    <p>Ballots Issued: @results.Ballots.Count(b => b.PublicKey != null)</p>
    <p>Ballots Used: @results.Ballots.Count(b => b.Submitted)</p>
    
    <table class="table table-hover"> 
        <thead>
        <th scope="col">Ballot ID</th>
        <th scope="col">Issued To</th>
        <th scope="col">Used?</th>
        </thead>
        <tbody>
        @foreach (var ballot in results.Ballots)
        {
            <tr>
                <td>@ballot.Id</td>
                <td>@(Convert.ToBase64String(ballot.PublicKey))</td>
                <td>@(ballot.Submitted ? "Yes" : "No")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private ElectionService.ElectionResults results = null;
    private bool error = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        try
        {
            results = electionService.GetResults(Guid.Parse(Id));
        }
        catch (Exception ex)
        {
            error = true;
        }
        StateHasChanged();
    }
}